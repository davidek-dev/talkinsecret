---
interface Props {
  videoUrl: string;
}

const { videoUrl } = Astro.props;

// YouTube Video ID extrahieren
const getYouTubeID = (url: string) => {
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
  const match = url.match(regExp);
  return match && match[2].length === 11 ? match[2] : null;
};

const videoID = getYouTubeID(videoUrl);
const embedUrl = `https://www.youtube.com/embed/${videoID}?enablejsapi=1&version=3&playerapiid=ytplayer`;
---

<!-- Font Awesome einbinden -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
  #video-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 394px;
    width: 700px;
    position: relative;
    cursor: none;
    max-width: 100%;
    background-image: url('/images/2E326wvssNc-HD.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }
  
	/* Gemeinsame Basis-Styles für Play Button und Custom Cursor */
	.circle-button {
	  width: 120px;
	  height: 120px;
	  border: 3px solid #884d45;
	  border-radius: 50%;
	  background-color: rgb(218, 227, 218); /* Transparenz entfernt */
	  display: flex;
	  justify-content: center;
	  align-items: center;
	  transition: all 0.3s ease; /* Transition für Hover-Effekt */
	}
  
	.circle-button:hover {
	  background-color: #884d45; /* Hintergrundfarbe ändern */
	  color: rgb(218, 227, 218); /* Textfarbe ändern */
	  transform: scale(1.1); /* Skalierungseffekt */
	}
  
	#play-button {
	  position: absolute;
	  left: 50%;
	  top: 50%;
	  transform: translate(-50%, -50%);
	  opacity: 1;
	  transition: opacity 0.2s ease;
	  cursor: none;
	}
  
	#custom-cursor {
	  position: fixed;
	  pointer-events: none;
	  z-index: 9999;
	  display: none;
	  transform: translate(-50%, -50%);
	  background-color: rgb(218, 227, 218); /* Transparenz entfernt */
	}
  
	/* Gemeinsame Icon-Styles */
	.play-icon, 
	.pause-icon,
	#custom-cursor i {
	  font-size: 40px;
	  color: #884d45;
	}
  
	.modal {
	  position: fixed;
	  display: flex;
	  justify-content: center;
	  align-items: center;
	}
  
	.modal-box {
	  width: auto !important;
	  height: 75vh !important; /* Höhe automatisch anpassen */
	  max-width: none !important;
	  padding: 0 !important;
	  aspect-ratio: 16/9 !important; /* Seitenverhältnis für Videos */
	}
  
	.aspect-w-16 {
	  position: relative;
	  width: 100%;
	  padding-bottom: 56.25%; /* 16:9 Seitenverhältnis */
	  height: 0;
	}
  
	.modal iframe {
	  position: absolute;
	  top: 0;
	  left: 0;
	  width: 100%;
	  height: 100%;
	  object-fit: contain;
	}
  
	.modal-action {
	  position: absolute;
	  bottom: 0;
	  right: 0;
	  padding: 1rem;
	}
  
	.modal-close-btn {
	  position: absolute !important;
	  right: 1rem !important;
	  top: 1rem !important;
	  z-index: 9999 !important;
	  width: 60px !important;  /* 50% der ursprünglichen Größe */
	  height: 60px !important; /* 50% der ursprünglichen Größe */
	  border: 3px solid #884d45 !important;
	  border-radius: 50% !important;
	  background-color: rgb(218, 227, 218) !important; /* Transparenz entfernt */
	  color: #884d45 !important;
	  font-size: 20px !important; /* 50% der ursprünglichen Größe */
	  display: flex !important;
	  justify-content: center !important;
	  align-items: center !important;
	  transition: all 0.3s ease !important;
	}
  
	.modal-close-btn:hover {
	  background-color: #884d45 !important;
	  color: white !important;
	  transform: scale(1.1) !important;
	}
  </style>


<div id="custom-cursor" class="circle-button">
	<i class="fa fa-solid fa-play"></i>
  </div>
  
  <div id="video-container">
	<video id="video" preload="metadata">
	  <source id="video-source" type="video/mp4">
	</video>
	<button id="play-button" class="circle-button">
	  <span class="play-icon">
		<i class="fa fa-solid fa-play"></i>
	  </span>
	</button>
  </div>

  <!-- Modal hinzufügen -->
<dialog id="video_modal" class="modal">
  <div class="modal-box">
    <form method="dialog">
      <button class="btn btn-sm btn-circle modal-close-btn">✕</button>
    </form>
    <div class="aspect-w-16">
		<iframe 
		id="modal-video"
		src={embedUrl}
		style="border: 0;"
		allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
	  ></iframe>
    </div>
  </div>
</dialog>
  
<script>
	document.addEventListener('DOMContentLoaded', () => {
	  const videoContainer = document.getElementById("video-container");
	  const customCursor = document.getElementById("custom-cursor");
	  const playButton = document.getElementById("play-button");
	  const modal = document.getElementById("video_modal");
	  
	  let isCursorVisible = false;
	
	  // Click-Handler für Video-Container
	  videoContainer.addEventListener('click', () => {
		if (modal instanceof HTMLDialogElement) {
		  modal.showModal();
		}
		const iframe = document.getElementById('modal-video');
		if (iframe instanceof HTMLIFrameElement && iframe.contentWindow) {
		  iframe.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
		}
	  });
	
	  // Modal schließen Event
	  modal.querySelector('form').addEventListener('submit', () => {
		const iframe = document.getElementById('modal-video');
		if (iframe instanceof HTMLIFrameElement && iframe.contentWindow) {
		  iframe.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
		}
	  });
	
	  // Event-Listener für Modal-Close (inkl. ESC-Taste)
	  modal.addEventListener('close', () => {
		const iframe = document.getElementById('modal-video');
		if (iframe instanceof HTMLIFrameElement && iframe.contentWindow) {
		  iframe.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}', '*');
		}
	  });
	
	  // Click outside zum Schließen
	  modal.addEventListener('click', (e) => {
		const modalDimensions = modal.getBoundingClientRect();
		if (
		  e.clientX < modalDimensions.left ||
		  e.clientX > modalDimensions.right ||
		  e.clientY < modalDimensions.top ||
		  e.clientY > modalDimensions.bottom
		) {
		  if (modal instanceof HTMLDialogElement) {
			modal.close();
		  }
		}
	  });
	
	  // Custom Cursor Bewegung mit requestAnimationFrame
	  videoContainer.addEventListener('mousemove', (e) => {
		if (!isCursorVisible) {
		  customCursor.style.display = 'flex';
		  isCursorVisible = true;
		}
		requestAnimationFrame(() => {
		  customCursor.style.left = `${e.clientX}px`;
		  customCursor.style.top = `${e.clientY}px`;
		});
	  });
	
	  videoContainer.addEventListener('mouseenter', () => {
		customCursor.style.display = 'flex';
		playButton.style.opacity = '0';
	  });
	
	  videoContainer.addEventListener('mouseleave', () => {
		customCursor.style.display = 'none';
		isCursorVisible = false;
		playButton.style.opacity = '1';
	  });
	
	  video.addEventListener("play", () => {
		customCursor.innerHTML = '<i class="fa fa-solid fa-pause" style="font-size: 40px; color: #884d45;"></i>';
	  });
	  
	  video.addEventListener("pause", () => {
		customCursor.innerHTML = '<i class="fa fa-solid fa-play" style="font-size: 40px; color: #884d45;"></i>';
	  });
	
	  video.addEventListener("ended", () => {
		playButton.innerHTML = '<span class="play-icon"><i class="fa fa-solid fa-play" style="font-size: 40px; color: #884d45;"></i></span>';
		customCursor.innerHTML = '<i class="fa fa-solid fa-play" style="font-size: 40px; color: #884d45;"></i>';
	  });
	});
	</script>